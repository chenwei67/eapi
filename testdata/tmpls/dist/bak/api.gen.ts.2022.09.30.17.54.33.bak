import { request } from 'umi';




// CallbackWechat
export async function PostApiCallbacksWechat (options?: { [key: string]: any }) {
  return request('/api/callbacks/wechat', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// OssCallback
export async function PostApiCallbacksOss (req: CommonOssCallbackReq,options?: { [key: string]: any }) {
  return request('/api/callbacks/oss', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GitHubWebhook
export async function PostApiGithubWebhook (options?: { [key: string]: any }) {
  return request('/api/github/webhook', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// GitHubSetup
export async function GetApiGithubSetup (options?: { [key: string]: any }) {
  return request('/api/github/setup', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// OauthUserInfo
export async function GetApiOauthUser (options?: { [key: string]: any }) {
  return request('/api/oauth/user', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// OauthUserInfo
export async function GetApiOauthAppUser (options?: { [key: string]: any }) {
  return request('/api/oauth/appUser', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Detail
export async function GetApiCmtDetail (options?: { [key: string]: any }) {
  return request('/api/cmt/detail', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Page
export async function GetApiHomePage (options?: { [key: string]: any }) {
  return request('/api/home/page', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Trees
export async function GetApiCmtSpaceTrees (options?: { [key: string]: any }) {
  return request('/api/cmt/space-trees', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ManagersX
export async function GetApiCmtManagers (options?: { [key: string]: any }) {
  return request('/api/cmt/managers', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// MyEmojis
export async function GetApiArticlesMyEmojis (req: ArticleMyEmojisRequest,options?: { [key: string]: any }) {
  return request('/api/articles/-/myEmojis', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Permission
export async function GetApiSpacesGuidPermission (options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/permission', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RefState
export async function GetApiReferralsState (req: CommunityRefStateReq,options?: { [key: string]: any }) {
  return request('/api/referrals/state', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// List
export async function GetApiMyCommunityList (options?: { [key: string]: any }) {
  return request('/api/my/community/list', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Apply
export async function PostApiMyCommunityApply (req: CommunityApplyRequest,options?: { [key: string]: any }) {
  return request('/api/my/community/apply', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// Update
export async function PutApiMyCommunitiesGuid (req: CommunityUpdateRequest,options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdatePrice
export async function PutApiMyCommunitiesGuidPrice (req: CommunityUpdatePriceRequest,options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid/price', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateBanner
export async function PutApiMyCommunitiesGuidBanner (req: CommunityUpdateBannerRequest,options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid/banner', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiMyCommunitiesGuid (options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// MemberList
export async function GetApiMyCommunitiesGuidMembers (req: CommunityMemberListRequest,options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid/members', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// UploadBannerToken
export async function PostApiMyCommunitiesGuidUploadBannerToken (req: CommunityUploadTokenRequest,options?: { [key: string]: any }) {
  return request('/api/my/communities/:guid/uploadBannerToken', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UploadToken
export async function PostApiMyCommunityUploadPicToken (req: CommunityUploadTokenRequest,options?: { [key: string]: any }) {
  return request('/api/my/community/uploadPicToken', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ApplyCreateCmtAudit
export async function PostApiMyCommunityApplyCreateAudit (options?: { [key: string]: any }) {
  return request('/api/my/community/applyCreateAudit', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// DeleteUser
export async function DeleteApiMyCommunityUsersUid (options?: { [key: string]: any }) {
  return request('/api/my/community/users/:uid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// UpdateUserStat
export async function PutApiMyCommunityUsersUid (options?: { [key: string]: any }) {
  return request('/api/my/community/users/:uid', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// UserJoinedCommunities
export async function GetApiMyJoinedCommunities (options?: { [key: string]: any }) {
  return request('/api/my/joined-communities', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// JoinCommunityWithRef
export async function PostApiMyJoinedCommunities (req: CommunityJoinCommunityWithRefReq,options?: { [key: string]: any }) {
  return request('/api/my/joined-communities', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UserQuitCommunity
export async function DeleteApiMyJoinedCommunitiesGuid (options?: { [key: string]: any }) {
  return request('/api/my/joined-communities/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// FollowingCreate
export async function PostApiMyFollowingUid (req: MyFollowingCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/following/:uid', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// FollowingDelete
export async function DeleteApiMyFollowingUid (options?: { [key: string]: any }) {
  return request('/api/my/following/:uid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// BlockList
export async function GetApiMyBlocks (req: MyBlockListReq,options?: { [key: string]: any }) {
  return request('/api/my/blocks', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// BlockCreate
export async function PostApiMyBlocksUid (req: MyBlockCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/blocks/:uid', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// BlockDelete
export async function DeleteApiMyBlocksUid (options?: { [key: string]: any }) {
  return request('/api/my/blocks/:uid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// NotificationCreate
export async function PostApiMyNotifications (req: MyNotificationCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/notifications', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// NotificationList
export async function GetApiMyNotifications (req: MyNotificationListReq,options?: { [key: string]: any }) {
  return request('/api/my/notifications', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// NotificationAuditList
export async function GetApiMyNotificationsAudits (req: MyNotificationAuditListRequest,options?: { [key: string]: any }) {
  return request('/api/my/notifications/-/audits', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// NotificationAuditPass
export async function PutApiMyNotificationsAuditsAuditIdPass (req: MyNotificationAuditPassRequest,options?: { [key: string]: any }) {
  return request('/api/my/notifications/-/audits/:auditId/pass', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// NotificationAuditReject
export async function PutApiMyNotificationsAuditsAuditIdReject (req: MyNotificationAuditRejectRequest,options?: { [key: string]: any }) {
  return request('/api/my/notifications/-/audits/:auditId/reject', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// NotificationUpdateAll
export async function PutApiMyNotifications (req: MyNotificationUpdateAllReq,options?: { [key: string]: any }) {
  return request('/api/my/notifications', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// NotificationUpdate
export async function PutApiMyNotificationsId (options?: { [key: string]: any }) {
  return request('/api/my/notifications/:id', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// NotificationUnViewCount
export async function GetApiMyNotificationsUnviewed (options?: { [key: string]: any }) {
  return request('/api/my/notifications/-/unviewed', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// My
export async function GetApiMy (options?: { [key: string]: any }) {
  return request('/api/my', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UpdateNickname
export async function PutApiMyNickname (req: UserUpdateNicknameRequest,options?: { [key: string]: any }) {
  return request('/api/my/nickname', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateAvatar
export async function PutApiMyAvatar (req: UserUpdateAvatarRequest,options?: { [key: string]: any }) {
  return request('/api/my/avatar', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UploadToken
export async function PostApiMyAvatarToken (req: UserUploadTokenRequest,options?: { [key: string]: any }) {
  return request('/api/my/avatarToken', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UpdatePhone
export async function PutApiMyPhone (req: UserUpdatePhoneRequest,options?: { [key: string]: any }) {
  return request('/api/my/phone', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateEmail
export async function PutApiMyEmail (req: UserUpdateEmailRequest,options?: { [key: string]: any }) {
  return request('/api/my/email', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// ManageCommunity
export async function PostApiMyManageCommunity (req: UserManageCommunityReq,options?: { [key: string]: any }) {
  return request('/api/my/manageCommunity', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// Referrals
export async function GetApiMyReferrals (req: MyReferralsReq,options?: { [key: string]: any }) {
  return request('/api/my/referrals', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ReferralsSend
export async function PostApiMyReferralsSend (req: MyReferralsSendReq,options?: { [key: string]: any }) {
  return request('/api/my/referrals/send', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UserTotal
export async function GetApiUsersNameTotal (options?: { [key: string]: any }) {
  return request('/api/users/:name/total', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// FollowersList
export async function GetApiUsersNameFollowers (req: ProfileFollowersListReq,options?: { [key: string]: any }) {
  return request('/api/users/:name/followers', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// FollowingList
export async function GetApiUsersNameFollowing (req: ProfileFollowingListReq,options?: { [key: string]: any }) {
  return request('/api/users/:name/following', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// UserMedalList
export async function GetApiUsersNameMedals (req: MedalUserMedalListRequest,options?: { [key: string]: any }) {
  return request('/api/users/:name/medals', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ArticlesList
export async function GetApiUsersNameArticles (req: ProfileArticlesListReq,options?: { [key: string]: any }) {
  return request('/api/users/:name/articles', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// QAList
export async function GetApiUsersNameQuestions (req: ProfileQAListReq,options?: { [key: string]: any }) {
  return request('/api/users/:name/questions', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Info
export async function GetApiUsersName (options?: { [key: string]: any }) {
  return request('/api/users/:name', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListLogos
export async function GetApiCommunitiesRecommendLogos (options?: { [key: string]: any }) {
  return request('/api/communities/recommendLogos', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListCovers
export async function GetApiCommunitiesRecommendCovers (options?: { [key: string]: any }) {
  return request('/api/communities/recommendCovers', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Managers
export async function GetApiCommunitiesGuidManagers (options?: { [key: string]: any }) {
  return request('/api/communities/:guid/managers', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListPublic
export async function GetApiCommunities (options?: { [key: string]: any }) {
  return request('/api/communities', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// TemplateList
export async function GetApiCommunitiesTemplates (options?: { [key: string]: any }) {
  return request('/api/communities/-/templates', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// BuyMember
export async function PostApiCommunitiesGuidBuyMember (req: CommunityBuyMemberRequest,options?: { [key: string]: any }) {
  return request('/api/communities/:guid/buy-member', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UserInfo
export async function GetApiCommunitiesGuidUserInfo (options?: { [key: string]: any }) {
  return request('/api/communities/:guid/user-info', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// TreeChangeSort
export async function PutApiCmtSpaceTreesChangeSort (req: SpaceTreeChangeSortRequest,options?: { [key: string]: any }) {
  return request('/api/cmt/space-trees/change-sort', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// TreeChangeGroup
export async function PutApiCmtSpaceTreesChangeGroup (req: SpaceTreeChangeGroupRequest,options?: { [key: string]: any }) {
  return request('/api/cmt/space-trees/change-group', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// RecommendList
export async function GetApiCmtRecommendList (options?: { [key: string]: any }) {
  return request('/api/cmt/recommendList', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CollectionGroupCreate
export async function PostApiMyCollectionGroups (req: MyCollectionGroupCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/collection-groups', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// CollectionGroupList
export async function GetApiMyCollectionGroups (options?: { [key: string]: any }) {
  return request('/api/my/collection-groups', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CollectionGroupDelete
export async function DeleteApiMyCollectionGroupsCgid (options?: { [key: string]: any }) {
  return request('/api/my/collection-groups/:cgid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// CollectionGroupUpdate
export async function PutApiMyCollectionGroupsCgid (req: MyCollectionGroupUpdateReq,options?: { [key: string]: any }) {
  return request('/api/my/collection-groups/:cgid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// CollectionList
export async function GetApiMyCollectionGroupsCgidCollections (req: MyCollectionListReq,options?: { [key: string]: any }) {
  return request('/api/my/collection-groups/:cgid/collections', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// CollectionCreate
export async function PostApiMyCollectionGroupsCollections (req: MyCollectionCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/collection-groups/-/collections', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// CollectionDelete
export async function DeleteApiMyCollectionGroupsCollections (req: MyCollectionDeleteReq,options?: { [key: string]: any }) {
  return request('/api/my/collection-groups/-/collections', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// SearchMember
export async function GetApiCommunitiesSearchMembers (req: CommunitySearchMemberReq,options?: { [key: string]: any }) {
  return request('/api/communities/-/searchMembers', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Upgrade
export async function PostApiCommunitiesUpgradeEdition (req: EditionUpgradeReq,options?: { [key: string]: any }) {
  return request('/api/communities/-/upgrade-edition', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// CreateGroup
export async function PostApiSpacesGroups (req: SpaceCreateOrUpdateGroupRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GroupInfo
export async function GetApiSpacesGroupsGuid (options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UpdateGroup
export async function PutApiSpacesGroupsGuid (req: SpaceCreateOrUpdateGroupRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// ChangeGroupSort
export async function PutApiSpacesGroupsGuidSort (req: SpaceChangeGroupSortRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/sort', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// DeleteGroup
export async function DeleteApiSpacesGroupsGuid (options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// GroupMemberList
export async function GetApiSpacesGroupsGuidMembers (req: SpaceGroupMemberListRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/members', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// SearchGroupMember
export async function GetApiSpacesGroupsGuidSearchMembers (req: SpaceSearchMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/searchMembers', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// CreateGroupMember
export async function PostApiSpacesGroupsGuidMembers (req: SpaceCreateMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/members', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// DeleteGroupMember
export async function DeleteApiSpacesGroupsGuidMembers (req: SpaceDeleteMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/members', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// ApplyGroupMember
export async function PostApiSpacesGroupsGuidApply (req: SpaceApplyGroupMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/apply', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GroupPermission
export async function GetApiSpacesGroupsGuidPermission (options?: { [key: string]: any }) {
  return request('/api/spaces/-/groups/:guid/permission', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Create
export async function PostApiSpaces (req: SpaceCreateRequest,options?: { [key: string]: any }) {
  return request('/api/spaces', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// Info
export async function GetApiSpacesGuid (options?: { [key: string]: any }) {
  return request('/api/spaces/:guid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Update
export async function PutApiSpacesGuid (req: SpaceUpdateRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateAttrName
export async function PutApiSpacesGuidUpdateAttrName (req: SpaceUpdateAttrRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/updateAttrName', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateAttrIcon
export async function PutApiSpacesGuidUpdateAttrIcon (req: SpaceUpdateAttrRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/updateAttrIcon', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UpdateAttrSpaceGroup
export async function PutApiSpacesGuidUpdateAttrGroup (req: SpaceUpdateAttrRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/updateAttrGroup', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// ChangeSort
export async function PutApiSpacesGuidSort (req: SpaceChangeSortRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/sort', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiSpacesGuid (options?: { [key: string]: any }) {
  return request('/api/spaces/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// MemberList
export async function GetApiSpacesGuidMembers (req: SpaceGroupMemberListRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/members', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// SearchMember
export async function GetApiSpacesGuidSearchMembers (req: SpaceSearchMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/searchMembers', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// CreateMember
export async function PostApiSpacesGuidMembers (req: SpaceCreateMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/members', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// DeleteMember
export async function DeleteApiSpacesGuidMembers (req: SpaceDeleteMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/members', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// Emojis
export async function GetApiSpacesGuidEmojis (options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/emojis', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UploadToken
export async function PostApiSpacesGuidUploadPicToken (req: SpaceUploadTokenRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/uploadPicToken', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ImUpload
export async function PostApiSpacesGuidImUpload (req: SpaceImUploadRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/imUpload', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ApplyMember
export async function PostApiSpacesGuidApply (req: SpaceApplyMemberRequest,options?: { [key: string]: any }) {
  return request('/api/spaces/:guid/apply', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ListArticle
export async function GetApiArticles (req: ArticleListArticleRequest,options?: { [key: string]: any }) {
  return request('/api/articles', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Recommends
export async function GetApiArticlesRecommends (req: ArticleListArticleRequest,options?: { [key: string]: any }) {
  return request('/api/articles/-/recommends', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// SpaceTops
export async function GetApiArticlesSpaceTops (req: ArticleSpaceTopsRequest,options?: { [key: string]: any }) {
  return request('/api/articles/-/spaceTops', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ListPermission
export async function GetApiArticlesPermissions (req: ArticleListPermissionRequest,options?: { [key: string]: any }) {
  return request('/api/articles/-/permissions', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ListCovers
export async function GetApiArticlesRecommendCovers (options?: { [key: string]: any }) {
  return request('/api/articles/-/recommendCovers', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CreateArticle
export async function PostApiArticles (req: ArticleCreateArticleRequest,options?: { [key: string]: any }) {
  return request('/api/articles', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GetArticle
export async function GetApiArticlesGuid (options?: { [key: string]: any }) {
  return request('/api/articles/:guid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// GetArticleContent
export async function GetApiArticlesGuidContent (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/content', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Permission
export async function GetApiArticlesGuidPermission (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/permission', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// GetArticleContentByCreator
export async function GetApiArticlesGuidContentByCreator (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/contentByCreator', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UpdateArticle
export async function PutApiArticlesGuid (req: ArticleUpdateArticleRequest,options?: { [key: string]: any }) {
  return request('/api/articles/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// DeleteArticle
export async function DeleteApiArticlesGuid (options?: { [key: string]: any }) {
  return request('/api/articles/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// SpaceTop
export async function PutApiArticlesGuidSpaceTop (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/spaceTop', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// CancelSpaceTop
export async function PutApiArticlesGuidCancelSpaceTop (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/cancelSpaceTop', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// Recommend
export async function PutApiArticlesGuidRecommend (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/recommend', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// CancelRecommend
export async function PutApiArticlesGuidCancelRecommend (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/cancelRecommend', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// OpenComment
export async function PutApiArticlesGuidOpenComment (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/openComment', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// CloseComment
export async function PutApiArticlesGuidCloseComment (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/closeComment', {
    method: 'PUT',
    
    ...(options || {}),
  });
}


// IncreaseEmoji
export async function PutApiArticlesGuidIncreaseEmoji (req: ArticleIncreaseEmojiRequest,options?: { [key: string]: any }) {
  return request('/api/articles/:guid/increaseEmoji', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// DecreaseEmoji
export async function PutApiArticlesGuidDecreaseEmoji (req: ArticleDecreaseEmojiRequest,options?: { [key: string]: any }) {
  return request('/api/articles/:guid/decreaseEmoji', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// CreateComment
export async function PostApiArticlesComments (req: ArticleCreateCommentRequest,options?: { [key: string]: any }) {
  return request('/api/articles/-/comments', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// DeleteComment
export async function DeleteApiArticlesGuidCommentsCommentGuid (options?: { [key: string]: any }) {
  return request('/api/articles/:guid/comments/:commentGuid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// CommentList
export async function GetApiArticlesGuidComments (req: ArticleTopicCommentListRequest,options?: { [key: string]: any }) {
  return request('/api/articles/:guid/comments', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ChildCommentList
export async function GetApiArticlesGuidCommentsCommentGuidChildComment (req: ArticleTopicChildCommentListRequest,options?: { [key: string]: any }) {
  return request('/api/articles/:guid/comments/:commentGuid/childComment', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Create
export async function PostApiQuestions (req: QuestionCreateRequest,options?: { [key: string]: any }) {
  return request('/api/questions', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// List
export async function GetApiQuestions (req: QuestionListRequest,options?: { [key: string]: any }) {
  return request('/api/questions', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// MyEmojis
export async function GetApiQuestionsMyEmojis (req: QuestionMyEmojisRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/myEmojis', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Info
export async function GetApiQuestionsGuid (options?: { [key: string]: any }) {
  return request('/api/questions/:guid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Update
export async function PutApiQuestionsGuid (req: QuestionUpdateArticleRequest,options?: { [key: string]: any }) {
  return request('/api/questions/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiQuestionsGuid (options?: { [key: string]: any }) {
  return request('/api/questions/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// CreateAnswer
export async function PostApiQuestionsGuidAnswers (req: QuestionCreateRequest,options?: { [key: string]: any }) {
  return request('/api/questions/:guid/answers', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// AnswerList
export async function GetApiQuestionsGuidAnswers (req: QuestionListRequest,options?: { [key: string]: any }) {
  return request('/api/questions/:guid/answers', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Update
export async function PutApiQuestionsAnswersAnswerGuid (req: QuestionUpdateArticleRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// IncreaseEmoji
export async function PutApiQuestionsAnswersAnswerGuidIncreaseEmoji (req: QuestionIncreaseEmojiRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/increaseEmoji', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// DecreaseEmoji
export async function PutApiQuestionsAnswersAnswerGuidDecreaseEmoji (req: QuestionDecreaseEmojiRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/decreaseEmoji', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// AnswerInfo
export async function GetApiQuestionsAnswersAnswerGuid (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiQuestionsAnswersAnswerGuid (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// CreateComment
export async function PostApiQuestionsAnswersAnswerGuidComments (req: QuestionCreateCommentRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// CommentList
export async function GetApiQuestionsAnswersAnswerGuidComments (req: QuestionCommentListRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ChildCommentList
export async function GetApiQuestionsAnswersAnswerGuidCommentsCommentGuidChildComment (req: QuestionChildCommentListRequest,options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments/:commentGuid/childComment', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// DeleteComment
export async function DeleteApiQuestionsAnswersAnswerGuidCommentsCommentGuid (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments/:commentGuid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// LikeQuestion
export async function PostApiQuestionsGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/:guid/like', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// UndoLikeQuestion
export async function DeleteApiQuestionsGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/:guid/like', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// LikeAnswer
export async function PostApiQuestionsAnswersAnswerGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/like', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// UndoLikeAnswer
export async function DeleteApiQuestionsAnswersAnswerGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/like', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// LikeComment
export async function PostApiQuestionsAnswersAnswerGuidCommentsCommentGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments/:commentGuid/like', {
    method: 'POST',
    
    ...(options || {}),
  });
}


// UndoLikeComment
export async function DeleteApiQuestionsAnswersAnswerGuidCommentsCommentGuidLike (options?: { [key: string]: any }) {
  return request('/api/questions/-/answers/:answerGuid/comments/:commentGuid/like', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// Create
export async function PostApiActivities (req: ActivityCreateReq,options?: { [key: string]: any }) {
  return request('/api/activities', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ListCovers
export async function GetApiActivitiesRecommendCovers (options?: { [key: string]: any }) {
  return request('/api/activities/-/recommendCovers', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Update
export async function PutApiActivitiesGuid (req: ActivityUpdateReq,options?: { [key: string]: any }) {
  return request('/api/activities/:guid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiActivitiesGuid (options?: { [key: string]: any }) {
  return request('/api/activities/:guid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// List
export async function GetApiActivities (req: ActivityListReq,options?: { [key: string]: any }) {
  return request('/api/activities', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Info
export async function GetApiActivitiesGuid (options?: { [key: string]: any }) {
  return request('/api/activities/:guid', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListJoinedUsers
export async function GetApiActivitiesGuidUsers (req: ActivityListJoinedUsersReq,options?: { [key: string]: any }) {
  return request('/api/activities/:guid/users', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ListJoined
export async function GetApiJoinedActivities (options?: { [key: string]: any }) {
  return request('/api/joined-activities', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Join
export async function PostApiJoinedActivitiesGuid (req: ActivityJoinReq,options?: { [key: string]: any }) {
  return request('/api/joined-activities/:guid', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// Quit
export async function DeleteApiJoinedActivitiesGuid (req: ActivityQuitReq,options?: { [key: string]: any }) {
  return request('/api/joined-activities/:guid', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// Query
export async function GetApiSearch (req: SearchQueryReq,options?: { [key: string]: any }) {
  return request('/api/search', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Create
export async function PostApiMedals (req: MedalCreateRequest,options?: { [key: string]: any }) {
  return request('/api/medals', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// Update
export async function PutApiMedalsMedalId (req: MedalUpdateRequest,options?: { [key: string]: any }) {
  return request('/api/medals/:medalId', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Delete
export async function DeleteApiMedalsMedalId (options?: { [key: string]: any }) {
  return request('/api/medals/:medalId', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// List
export async function GetApiMedals (req: MedalMedalListRequest,options?: { [key: string]: any }) {
  return request('/api/medals', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// Award
export async function PostApiMedalsMedalIdMembers (req: MedalAwardRequest,options?: { [key: string]: any }) {
  return request('/api/medals/:medalId/members', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// MemberList
export async function GetApiMedalsMedalIdMembers (req: MedalMemberListRequest,options?: { [key: string]: any }) {
  return request('/api/medals/:medalId/members', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// DeleteMember
export async function DeleteApiMedalsUsersMedalMemberId (options?: { [key: string]: any }) {
  return request('/api/medals/-/users/:medalMemberId', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// UpdateMember
export async function PutApiMedalsUsersMedalMemberId (req: MedalUpdateMemberRequest,options?: { [key: string]: any }) {
  return request('/api/medals/-/users/:medalMemberId', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// UploadToken
export async function PostApiMedalsUploadPicToken (req: MedalUploadTokenRequest,options?: { [key: string]: any }) {
  return request('/api/medals/-/uploadPicToken', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GoodCreate
export async function PostApiGoods (req: ShopGoodCreateReq,options?: { [key: string]: any }) {
  return request('/api/goods', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// GoodList
export async function GetApiGoods (req: ShopGoodListReq,options?: { [key: string]: any }) {
  return request('/api/goods', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// GoodInfo
export async function GetApiGoodsId (options?: { [key: string]: any }) {
  return request('/api/goods/:id', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// GoodDelete
export async function DeleteApiGoodsId (options?: { [key: string]: any }) {
  return request('/api/goods/:id', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// GoodUpdate
export async function PutApiGoodsId (req: ShopGoodUpdateReq,options?: { [key: string]: any }) {
  return request('/api/goods/:id', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// OrderCreate
export async function PostApiMyOrders (req: ShopOrderCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/orders', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// OrderList
export async function GetApiMyOrders (req: ShopOrderListReq,options?: { [key: string]: any }) {
  return request('/api/my/orders', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// OrderInfo
export async function GetApiMyOrdersSn (options?: { [key: string]: any }) {
  return request('/api/my/orders/:sn', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// OrderDelete
export async function DeleteApiMyOrdersSn (options?: { [key: string]: any }) {
  return request('/api/my/orders/:sn', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// OrderUpdate
export async function PutApiMyOrdersSn (req: ShopOrderUpdateReq,options?: { [key: string]: any }) {
  return request('/api/my/orders/:sn', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// ChargeCreate
export async function PostApiMyCharges (req: ShopChargeCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/charges', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ChargeDelete
export async function DeleteApiMyChargesSn (options?: { [key: string]: any }) {
  return request('/api/my/charges/:sn', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// ChargeInfo
export async function GetApiMyChargesSn (options?: { [key: string]: any }) {
  return request('/api/my/charges/:sn', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RefundCreate
export async function PostApiMyRefunds (req: ShopRefundCreateReq,options?: { [key: string]: any }) {
  return request('/api/my/refunds', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// RefundInfo
export async function GetApiMyRefundsSn (req: ShopRefundInfoReq,options?: { [key: string]: any }) {
  return request('/api/my/refunds/:sn', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// CmtUserInfo
export async function GetApiMyCmtUser (options?: { [key: string]: any }) {
  return request('/api/my/cmt/user', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UpdateUserInfo
export async function PutApiMyCmtUser (req: CommunityUpdateUserInfoRequest,options?: { [key: string]: any }) {
  return request('/api/my/cmt/user', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// List
export async function GetApiEditions (options?: { [key: string]: any }) {
  return request('/api/editions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CreateNode
export async function PostApiDriveNodes (req: DriveCreateNodeReq,options?: { [key: string]: any }) {
  return request('/api/drive/nodes', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// ListNode
export async function GetApiDriveNodes (req: DriveListNodeReq,options?: { [key: string]: any }) {
  return request('/api/drive/nodes', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// DeleteNode
export async function DeleteApiDriveNodesNguid (req: DriveDeleteNodeReq,options?: { [key: string]: any }) {
  return request('/api/drive/nodes/:nguid', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// UpdateNode
export async function PutApiDriveNodesNguid (req: DriveUpdateNodeReq,options?: { [key: string]: any }) {
  return request('/api/drive/nodes/:nguid', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// ListDescendantNode
export async function GetApiDriveAllDescendantNodes (req: DriveListDescendantNodeReq,options?: { [key: string]: any }) {
  return request('/api/drive/all-descendant-nodes', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// ManagerMemberList
export async function GetApiCmtAdminPmsManagersMembers (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/managers/members', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CreateManagerMember
export async function PostApiCmtAdminPmsManagersMembers (req: PmsCreateManagerMemberReq,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/managers/members', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// DeleteManagerMember
export async function DeleteApiCmtAdminPmsManagersMembersUid (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/managers/members/:uid', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// RoleList
export async function GetApiCmtAdminPmsRoles (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// UserRoleIds
export async function GetApiCmtAdminPmsRolesUsersUidRoleIds (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/-/users/:uid/roleIds', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// CreateRole
export async function PostApiCmtAdminPmsRoles (req: PmsCreateRoleRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// UpdateRole
export async function PutApiCmtAdminPmsRolesRoleId (req: PmsCreateRoleRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// DeleteRole
export async function DeleteApiCmtAdminPmsRolesRoleId (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId', {
    method: 'DELETE',
    
    ...(options || {}),
  });
}


// RoleMemberList
export async function GetApiCmtAdminPmsRolesRoleIdMembers (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/members', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RolePermission
export async function GetApiCmtAdminPmsRolesRoleIdPermissions (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/permissions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RoleSpaceGroupPermission
export async function GetApiCmtAdminPmsRolesRoleIdSpaceGroupPermissions (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spaceGroupPermissions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RoleSpacePermission
export async function GetApiCmtAdminPmsRolesRoleIdSpacePermissions (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spacePermissions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RoleSpaceInitPermission
export async function GetApiCmtAdminPmsRolesRoleIdSpacesGuidInitPermissions (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spaces/:guid/initPermissions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// RoleSpaceGroupInitPermission
export async function GetApiCmtAdminPmsRolesRoleIdSpaceGroupsGuidInitPermissions (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spaceGroups/:guid/initPermissions', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// PutRolePermission
export async function PutApiCmtAdminPmsRolesRoleIdPermissions (req: PmsPutRolePermissionRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/permissions', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// PutRoleSpaceGroupPermission
export async function PutApiCmtAdminPmsRolesRoleIdSpaceGroupPermissions (req: PmsPutRoleSpaceGroupPermissionRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spaceGroupPermissions', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// PutRoleSpacePermission
export async function PutApiCmtAdminPmsRolesRoleIdSpacePermissions (req: PmsPutRoleSpacePermissionRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/spacePermissions', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// CreateRoleMember
export async function PostApiCmtAdminPmsRolesRoleIdMembers (req: PmsCreateRoleMemberRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/members', {
    method: 'POST',
    body: req ,
    ...(options || {}),
  });
}


// DeleteRoleMember
export async function DeleteApiCmtAdminPmsRolesRoleIdMembers (req: PmsDeleteRoleMemberRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/pms/roles/:roleId/members', {
    method: 'DELETE',
    body: req ,
    ...(options || {}),
  });
}


// CommunityTotalList
export async function GetApiCmtAdminTotalCommunityKey (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/total/community/:key', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// SpaceTotalList
export async function GetApiCmtAdminTotalSpaceSpaceGuidKey (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/total/space/:spaceGuid/:key', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListPage
export async function GetApiCmtAdminLoggerListPage (req: LoggerListPageRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/logger/listPage', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// EventAndGroupList
export async function GetApiCmtAdminLoggerEventAndGroupList (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/logger/eventAndGroupList', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Equity
export async function GetApiCmtAdminBillingEquityData (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/billing/equityData', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// ListPage
export async function GetApiCmtAdminCmtGuidBillingListPage (req: BillingListPageRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/:cmtGuid/billing/listPage', {
    method: 'GET',
    body: req ,
    ...(options || {}),
  });
}


// PlatformAllList
export async function GetApiCmtAdminApps (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/apps', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Put
export async function PutApiCmtAdminAppsAppId (req: AppPutRequest,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/apps/:appId', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Get
export async function GetApiCmtAdminHome (options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/home', {
    method: 'GET',
    
    ...(options || {}),
  });
}


// Put
export async function PutApiCmtAdminHome (req: HomePutReq,options?: { [key: string]: any }) {
  return request('/api/cmtAdmin/home', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// Put
export async function PutApiIntgsGithubAppId (req: AppPutRequest,options?: { [key: string]: any }) {
  return request('/api/intgs/github/appId', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}


// QueryFigures
export async function PutApiIntgsFigures (req: ThirdQueryFiguresReq,options?: { [key: string]: any }) {
  return request('/api/intgs/figures', {
    method: 'PUT',
    body: req ,
    ...(options || {}),
  });
}




type ArticleListArticleRequest = {
    
    spaceGuid; // 
    
    currentPage; // 当前页数
    
    sort; // 排序值
    
}

type SpaceChangeGroupSortRequest = {
    
    spaceGroupGuid; // 
    
    afterSpaceGroupGuid; // 
    
}

type SpaceGroupMemberListRequest = {
    
    currentPage; // 当前页数
    
}

type QuestionCreateRequest = {
    
    name; // 
    
    spaceGuid; // 
    
    content; // 
    
    imageUrls; // 
    
}

type ActivityJoinReq = {
    
    uid; // 
    
}

type ArticleIncreaseEmojiRequest = {
    
    emojiId; // 
    
}

type MedalUploadTokenRequest = {
    
    fileName; // 
    
    size; // 
    
}

type ShopGoodCreateReq = {
    
    onlineTime; // 
    
    name; // 
    
    title; // 
    
    stock; // 
    
    showPrice; // 
    
    cidList; // 
    
    subTitle; // 
    
    specList; // 
    
    cmtGuid; // 
    
    artistDesc; // 
    
    imageSpecId; // 
    
    preHtml; // 
    
    html; // 
    
    worksDesc; // 
    
    cover; // 
    
    saleTime; // 
    
    payType; // 
    
    originPrice; // 
    
    groupSaleNum; // 
    
    endTime; // 
    
    homeCover; // 
    
    saleNum; // 
    
    freightFee; // 
    
    price; // 
    
    skuList; // 
    
    galleryList; // 
    
    baseSaleNum; // 
    
    showOriginPrice; // 
    
    wechatHtml; // 
    
    freightId; // 
    
    preMarkdown; // 
    
    markdown; // 
    
}

type ShopRefundInfoReq = {
    
    chargeSn; // 
    
    refundSn; // 
    
}

type DriveListNodeReq = {
    
    spaceGuid; // 空间guid
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    parentGuid; // 不能和SpaceGuid同事为空
    
}

type CommonOssCallbackReq = {
    
    object; // 
    
    size; // 
    
    cmtGuid; // 
    
    spaceGuid; // 
    
    fileGuid; // 
    
    uid; // 
    
    fileType; // 
    
    bucket; // 
    
}

type MyReferralsSendChannel = {
    
    receiver; // 邮箱或电话
    
    channel; // 发送通道，email、sms
    
    ref; // 邀请码
    
}

type ShopRefundCreateReq = {
    
    reason; // 
    
    orderSn; // 
    
    chargeSn; // 
    
    amount; // 
    
}

type SpaceCreateRequest = {
    
    spaceGroupGuid; // 
    
    name; // 
    
    iconType; // 
    
    icon; // 
    
    spaceType; // 空间类型
    
    spaceThirdType; // 空间第三方类型
    
    spaceLayout; // 空间布局
    
    visibilityLevel; // visibilityLevel
    
}

type QuestionCreateCommentRequest = {
    
    commentGuid; // 如果为空，说明是一级评论
    
    content; // 
    
}

type Goodv1GoodSku = {
    
    originPrice; // 
    
    saleNum; // 
    
    groupSaleNum; // 
    
    cmtGuid; // 
    
    id; // 
    
    createdUid; // 
    
    specValueSign; // 规格值标识，用于买东西的时候，校验是否选择了所
    
    whiteLimitNum; // 
    
    price; // 
    
    stock; // 
    
    title; // 
    
    status; // 
    
    issueType; // 
    
    note; // 
    
    updatedUid; // 
    
    goodId; // 
    
    specList; // 
    
    code; // 
    
    cover; // 
    
    weight; // 
    
    specSign; // 规格标识
    
    contractId; // 
    
}

type ShopGoodUpdateReq = {
    
}

type ShopOrderUpdateReq = {
    
    state; // 订单状态
    
}

type MyCollectionDeleteReq = {
    
    collectionGroupIds; // 
    
    guid; // 
    
    type; // 
    
}

type SpaceUpdateRequest = {
    
    isAllowReadMemberList; // 
    
    spaceOptions; // 
    
    name; // SpaceGroupGuid        string                 `json:&quot;spaceGroupGuid&quot; binding:&quot;required&quot; label:&quot;组&quot;`
    
    iconType; // 
    
    icon; // 
    
    spaceType; // 空间类型
    
    spaceLayout; // 空间布局
    
    visibilityLevel; // visibilityLevel
    
}

type Goodv1GoodSpecValueInfo = {
    
    Id; // 
    
    Name; // 
    
    cmtGuid; // 
    
}

type PmsCreateRoleRequest = {
    
    name; // 
    
}

type PmsDeleteRoleMemberRequest = {
    
    uids; // 
    
}

type CommunityUpdatePriceRequest = {
    
    isSetPrice; // 
    
    annualPrice; // 
    
    annualOriginPrice; // 
    
}

type MyNotificationUpdateAllReq = {
    
    status; // 
    
}

type MedalUserMedalListRequest = {
    
    currentPage; // 当前页数
    
}

type ProfileQAListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type SpaceApplyMemberRequest = {
    
    reason; // 
    
}

type QuestionMyEmojisRequest = {
    
    guids; // 
    
}

type MyNotificationAuditListRequest = {
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    currentPage; // 当前页数
    
}

type CommunityBuyMemberRequest = {
    
    chargeMethod; // 支付方式，不能为空
    
    memberType; // 年度会员 为 1， 月度会员 为 2
    
}

type MyCollectionGroupUpdateReq = {
    
    desc; // 
    
    title; // 
    
}

type CommunitySearchMemberReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    keyword; // 当前页数
    
    spaceGuid; // 空间guid，可以为空
    
}

type SpaceCreateMemberRequest = {
    
    addUids; // 
    
}

type ActivityQuitReq = {
    
    uid; // 
    
}

type CommunityUpdateRequest = {
    
    name; // 
    
    logo; // 
    
    visibilityLevel; // 
    
}

type MyNotificationAuditRejectRequest = {
    
    opReason; // 管理员理由
    
}

type ActivityListReq = {
    
    currentPage; // 当前页数
    
    creatorUid; // 活动创建人，为空表示不限定创建人
    
}

type MyCollectionGroupCreateReq = {
    
    title; // 
    
    desc; // 
    
}

type ArticleUpdateArticleRequest = {
    
    name; // 
    
    content; // 
    
    contentHtml; // 
    
    imageUrls; // 
    
    headImage; // 
    
}

type SpaceUpdateAttrRequest = {
    
    spaceGroupGuid; // 
    
    name; // 
    
    icon; // 
    
}

type ShopChargeCreateReq = {
    
    chargeMethod; // 
    
    amount; // 
    
    subject; // 
    
    describe; // 
    
    orderSn; // 
    
}

type CommunityJoinCommunityWithRefReq = {
    
    ref; // 邀请码
    
}

type Commonv1PmsItem = {
    
    title; // 标题
    
    desc; // 描述
    
    flag; // 符号，现在是switch，也可能后续是select
    
    needUpgrade; // 是否需要升级
    
    upgradeDesc; // 升级描述
    
    actionName; // 标识
    
}

type BillingListPageRequest = {
    
    currentPage; // 当前页数
    
}

type CommunityMemberListRequest = {
    
    currentPage; // 当前页数
    
}

type Commonv1Pagination = {
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    total; // 总数
    
    currentPage; // 当前页数
    
}

type MyNotificationListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type Spacev1SpaceOption = {
    
    spaceOptionType; // 可选项类型
    
    name; // 名称
    
    spaceOptionId; // 可选项
    
    value; // 可选项值
    
}

type ArticleTopicChildCommentListRequest = {
    
    currentPage; // 
    
}

type QuestionIncreaseEmojiRequest = {
    
    emojiId; // 
    
}

type ProfileFollowingListReq = {
    
    sort; // 排序字符串
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
}

type SearchQueryReq = {
    
    keyword; // Keyword 进行查询字符串
    
    bizType; // BizType 业务类型，如果为0表示搜索全部业务类型
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type ShopOrderListReq = {
    
    limit; // 
    
    sort; // 排序字符串
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    start; // 
    
}

type ArticleTopicCommentListRequest = {
    
    currentPage; // 
    
}

type PmsPutRolePermissionRequest = {
    
    list; // 
    
}

type HomePutReq = {
    
    bannerLink; // banner的跳转链接
    
    defaultPageByNotLogin; // 未登录用户默认访问页面
    
    isSetHome; // 是否启用首页
    
    articleSortByLogin; // 登录用户推荐内容排序规则
    
    bannerTitle; // banner文案
    
    articleHotShowWithLatest; // 展示近期多少天内创建的帖子
    
    activityLatestShowSum; // 展示近期的活动数量
    
    bannerImg; // 启用首页banner
    
    defaultPageByNewUser; // 新用户注册默认访问页面
    
    defaultPageByLogin; // 登录用户默认访问页面
    
    isSetBanner; // 是否启用banner
    
    articleSortByNotLogin; // 未登录用户推荐内容排序规则
    
    articleHotShowSum; // 展示热门帖子的数量
    
}

type CommunityUploadTokenRequest = {
    
    fileName; // 
    
    size; // 
    
}

type UserUpdatePhoneRequest = {
    
    phone; // 
    
}

type MyReferralsReq = {
    
}

type SpaceSearchMemberRequest = {
    
    keyword; // 当前页数
    
}

type SpaceApplyGroupMemberRequest = {
    
    reason; // 
    
}

type MyBlockCreateReq = {
    
    pagination; // 
    
}

type UserUploadTokenRequest = {
    
    fileName; // 
    
    size; // 
    
}

type MyCollectionListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type QuestionListRequest = {
    
    currentPage; // 当前页数
    
    sort; // 排序值
    
    spaceGuid; // 
    
}

type ProfileFollowersListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type SpaceDeleteMemberRequest = {
    
    delUids; // 
    
}

type ActivityListJoinedUsersReq = {
    
    currentPage; // 当前页数
    
}

type MedalUpdateMemberRequest = {
    
    startTime; // 
    
    endTime; // 
    
    type; // 
    
}

type DriveDeleteNodeReq = {
    
    spaceGuid; // 
    
}

type UserManageCommunityReq = {
    
    currentPage; // 当前页数
    
}

type MyCollectionCreateReq = {
    
    type; // 
    
    collectionGroupIds; // 
    
    guid; // 
    
}

type MedalCreateRequest = {
    
    name; // 
    
    icon; // 
    
    desc; // 
    
}

type Pmsv1SpaceGroupPmsItem = {
    
    guid; // guid 信息
    
    name; // 名称
    
    list; // space group 里面的权限列表
    
}

type PmsPutRoleSpaceGroupPermissionRequest = {
    
    list; // 
    
}

type AppPutRequest = {
    
    enable; // 
    
}

type DriveCreateNodeReqItem = {
    
    name; // 
    
    size; // 
    
}

type CommunityUpdateBannerRequest = {
    
    img; // 
    
    title; // 
    
}

type ProfileArticlesListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type SpaceTreeChangeGroupRequest = {
    
    spaceGuid; // 
    
    afterSpaceGroupGuid; // 
    
}

type ArticleDecreaseEmojiRequest = {
    
    emojiId; // 
    
}

type QuestionUpdateArticleRequest = {
    
    name; // 
    
    content; // 
    
    imageUrls; // 
    
}

type QuestionCommentListRequest = {
    
    currentPage; // 
    
}

type ActivityUpdateReq = {
    
    content; // 
    
    signUpStartTime; // 
    
    cover; // 
    
    name; // 
    
    fee; // 
    
    description; // 
    
    location; // 
    
    isFree; // 
    
    guestUids; // 
    
    address; // 
    
    isOnline; // 
    
    startTime; // 
    
    endTime; // 
    
    signUpEndTime; // 
    
}

type DriveUpdateNodeReq = {
    
    spaceGuid; // 
    
    name; // 新文件名, 如无需修改可不赋值
    
    parentGuid; // 新父guid, 如无需修改可不赋值
    
}

type LoggerListPageRequest = {
    
    group; // 
    
    operateUid; // 
    
    targetUid; // 
    
    currentPage; // 当前页数
    
    event; // 
    
}

type SpaceChangeSortRequest = {
    
    afterSpaceGuid; // 
    
    spaceGuid; // 
    
}

type MedalMemberListRequest = {
    
    currentPage; // 当前页数
    
}

type CommunityApplyRequest = {
    
    name; // 
    
    visibilityLevel; // 
    
    templateId; // 
    
}

type SpaceCreateOrUpdateGroupRequest = {
    
    visibilityLevel; // 
    
    isOpenReadMemberList; // 如果打开，属于这个分组下的用户，可以看到用户列表
    
    name; // 
    
    iconType; // 
    
    icon; // 
    
}

type SpaceUploadTokenRequest = {
    
    fileName; // 
    
    type; // 
    
    size; // 
    
}

type CommunityRefStateReq = {
    
    ref; // 邀请码
    
}

type MyNotificationAuditPassRequest = {
    
    opReason; // 管理员理由
    
}

type ArticleSpaceTopsRequest = {
    
    spaceGuid; // 
    
}

type ShopGoodListReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
}

type Pmsv1SpacePmsItem = {
    
    guid; // guid 信息
    
    name; // 名称
    
    list; // space里面的权限列表
    
}

type PmsCreateRoleMemberRequest = {
    
    uids; // 
    
}

type ArticleMyEmojisRequest = {
    
    guids; // 
    
}

type ArticleListPermissionRequest = {
    
    guids; // 
    
}

type MedalUpdateRequest = {
    
    name; // 
    
    icon; // 
    
    desc; // 
    
}

type Goodv1GoodSkuSpecInfo = {
    
    cmtGuid; // 
    
    id; // 
    
    name; // 
    
    valueId; // 
    
    valueName; // 
    
    valueImg; // 
    
}

type MyFollowingCreateReq = {
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    currentPage; // 当前页数
    
}

type MyBlockListReq = {
    
    pagination; // 
    
}

type UserUpdateEmailRequest = {
    
    email; // 
    
}

type SpaceImUploadRequest = {
    
    fileName; // 
    
    type; // 
    
}

type DriveCreateNodeReq = {
    
    nodes; // 不能为空
    
    parentGuid; // 不能和SpaceGuid同时为空
    
    spaceGuid; // 不能为空
    
    type; // 不能为空
    
}

type DriveListDescendantNodeReq = {
    
    currentPage; // 当前页数
    
    pageSize; // 每页总数
    
    sort; // 排序字符串
    
    guid; // 自己guid
    
    spaceGuid; // 空间guid
    
}

type UserUpdateAvatarRequest = {
    
    url; // 
    
}

type PmsCreateManagerMemberReq = {
    
    uids; // 
    
}

type ShopOrderCreateReq = {
    
    ext; // 扩展字段
    
    buyerName; // 买家姓名
    
    buyerEmail; // 买家邮箱
    
    buyerAvatar; // 冗余字段，买家头像
    
    remark; // 备注
    
    totalAmount; // 订单总价格
    
    prePayAmount; // 预付款
    
    buyerPhone; // 买家电话
    
    goodAmount; // 商品合计
    
    orderGoodList; // 商品列表
    
}

type CommunityUpdateUserInfoRequest = {
    
    nickname; // 
    
    position; // 
    
}

type ArticleCreateCommentRequest = {
    
    guid; // 
    
    commentGuid; // 
    
    content; // 
    
}

type QuestionDecreaseEmojiRequest = {
    
    emojiId; // 
    
}

type ActivityCreateReq = {
    
    content; // 
    
    startTime; // 
    
    address; // 
    
    isOnline; // 
    
    isFree; // 
    
    description; // 
    
    endTime; // 
    
    location; // 
    
    signUpStartTime; // 
    
    fee; // 
    
    spaceGuid; // 
    
    name; // 
    
    signUpEndTime; // 
    
    guestUids; // 
    
    cover; // 
    
}

type MedalAwardRequest = {
    
    uids; // 
    
    startTime; // 
    
    endTime; // 
    
    type; // 
    
}

type MyNotificationCreateReq = {
    
    type; // 消息类型
    
    targetType; // 对象类型
    
    targetId; // 对象ID
    
    uids; // 用户ID列表
    
    link; // 消息外链
    
    ctime; // 附属数据
Meta []byte `protobuf:&quot;bytes,7,opt,name=meta,proto3&quot; json:&quot;meta,omitempty&quot;`
可选. 通知时间. 如果是0值则自动取当前时间
    
}

type MedalMedalListRequest = {
    
    currentPage; // 当前页数
    
}

type Goodv1GoodSpecInfo = {
    
    Name; // 
    
    ValueList; // 
    
    cmtGuid; // 
    
    Id; // 
    
}

type Orderv1OrderGood = {
    
    img; // 图片
    
    title; // 商品名称
    
    id; // 主键
    
    orderId; // 订单ID
    
    num; // 购买数量
    
    payTotal; // 一般是 payPrice * count - 优惠。目前没有优惠信息
    
    goodFreightFee; // 商品的运费
    
    specList; // 规格
    
    price; // 商品价格 just价格
    
    priceType; // 价格类型
    
    payPrice; // 商品实际支付价格(拼团商品适用)
    
    goodId; // 商品主表ID
    
    goodFreightWay; // 商品运费方式
    
    goodSkuId; // 商品ID
    
    goodType; // 商品类型
    
    captainPrice; // 团长价格 just价格，一般和实际支付价格一致
    
    buyerId; // buyerId
    
    groupPrice; // 拼团价格 just价格，一般和实际支付价格一致
    
    cmtGuid; // 社区Guid
    
}

type UserUpdateNicknameRequest = {
    
    nickname; // 
    
}

type EditionUpgradeReq = {
    
    chargeMethod; // 支付方式，不能为空
    
    duration; // 需要Increase或Decrease的Duration，如果无需续期，则此字段可以为零值，暂时只允许Increase
    
    durationUnit; // 时长单位,天、月、年，如无需续期，则此字段可以为零值
    
    editionId; // 需要升级的版本ID，如果无需升级Edition，则可以此字段可以为零值
    
}

type QuestionChildCommentListRequest = {
    
    currentPage; // 
    
}

type PmsPutRoleSpacePermissionRequest = {
    
    list; // 
    
}

type SpaceTreeChangeSortRequest = {
    
    afterSpaceGuid; // 
    
    spaceGuid; // 
    
    afterSpaceGroupGuid; // 
    
    spaceGroupGuid; // 
    
    type; // 
    
}

type Orderv1OrderExtend = {
    
    receiverAddrDetail; // 收货人地址地区
    
    trackingNo; // 物流单号
    
    expressId; // 物流公司id，默认为0 代表不需要物流
    
    expressName; // 物流公司
    
    orderId; // 订单ID
    
    receiverName; // 收货人姓名
    
    receiverPhone; // 收获人手机
    
    receiverAddrRegion; // 收货人地址地区
    
}

type ThirdQueryFiguresReq = {
    
    name; // 显示名称, 比如 &quot;用户增长&quot;
    
    key; // 唯一Key名, 比如 &quot;member_growth&quot;
    
    st; // 开始时间戳, 秒
    
    et; // 终止时间戳, 秒
    
    type; // 集成类型
    
}
